#+title:    annt's GNU Emacs'
#+author:   anntnzrb
#+email:    anntnzrb@proton.me
#+startup: content indent
#+property: header-args :results silent

# macros
#+macro: export-date    (eval (format-time-string "%F" (current-time)))
#+macro: emacs-version  (eval (substring (emacs-version) 10 14))
#+macro: system-options (eval system-configuration-options)

- created: 2020-11-07
- updated: *{{{export-date}}}*
- /GNU Emacs/ system details:
  - version: *{{{emacs-version}}}*
  - build options: *{{{system-options}}}*

* table of contents                                          :TOC_3:noexport:
- [[#core-settings][core settings]]
  - [[#initialization-files][initialization files]]
    - [[#early-initel][=early-init.el=]]
    - [[#initel][=init.el=]]
  - [[#preamble][preamble]]
    - [[#package-management][package management]]
    - [[#helpers][helpers]]
  - [[#generals][generals]]
    - [[#windows-buffers-and-tabs][windows, buffers and tabs]]
    - [[#emacs-server][Emacs server]]
    - [[#indentification][indentification]]
    - [[#custom-custom-file][custom custom file]]
    - [[#backups][backups]]
    - [[#editing][editing]]
    - [[#vi-emulation][Vi emulation]]
    - [[#mouse--cursor][mouse & cursor]]
    - [[#binds][binds]]
  - [[#appearance][appearance]]
    - [[#fonts][fonts]]
    - [[#themes][themes]]
    - [[#dashboard][dashboard]]
    - [[#modeline][modeline]]
    - [[#tooltips][tooltips]]
- [[#dired][dired]]
- [[#programming][programming]]
  - [[#shell][Shell]]
  - [[#makefile][Makefile]]
  - [[#c-like][C-like]]
    - [[#c][C]]
  - [[#lisp-like][Lisp-like]]
    - [[#emacs-lisp-elisp][Emacs Lisp (Elisp)]]
    - [[#common-lisp][Common Lisp]]
    - [[#racket][Racket]]
    - [[#fennel][Fennel]]
  - [[#nix][Nix]]
  - [[#haskell][Haskell]]
  - [[#lua][Lua]]
  - [[#yaml][YAML]]
  - [[#web][Web]]
    - [[#html][HTML]]
    - [[#css][CSS]]
    - [[#javascript][JavaScript]]
    - [[#typescript][TypeScript]]
    - [[#markdown][Markdown]]
  - [[#assembly][Assembly]]
    - [[#mips][MIPS]]
- [[#version-control][version control]]
- [[#applications--utilities][applications & utilities]]
  - [[#completion--extras][completion & extras]]
    - [[#syntax-checking][syntax checking]]
    - [[#snippets][snippets]]
  - [[#spelling][spelling]]
    - [[#flyspell][FlySpell]]
  - [[#bookmarks][bookmarks]]
  - [[#org][org]]
    - [[#latex][LaTeX]]
    -  [[#setup-files][setup files]]

* core settings

** initialization files

these file should already be present in the =user-emacs-directory= directory
but are kept here for editing purposes.

*** =early-init.el=

/GNU Emacs/ =27.1= offers new file called =early-init.el= which allows
customizations that take effect during Emacs startup earlier than the normal
init file.  This file is loaded before the package system and GUI is
initialized.

references:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][The Early Init File]]

#+include: early-init.el src emacs-lisp :tangle no

*** =init.el=

this file is responsible of loading the necessary /ELisp/ code whenever
/GNU Emacs/ starts.  my configuration is (obviously) written literally using
/Org/ so the purpose of this file is to contain the instructions to transform
this literate configuration into /ELisp/ code and load it.

#+include: init.el src emacs-lisp :tangle no

** preamble

create the file header for the tangled file and =require= whatever it's needed
from external sources.

#+begin_src emacs-lisp
;;; swisschamp.el --- annt's GNU Emacs configuration file -*- lexical-binding: t -*-

;;; Commentary:

;;; annt's GNU Emacs' configuration (swisschamp).

;;; Code:

(require 'swisschamp-core)
(require 'swisschamp-helper)
#+end_src

*** package management

| [[https://github.com/raxod502/straight.el][straight]] | purely functional package manager |

a few reasons why i consider =straight.el=:

- functional
- reproducible package management
- packages cloned as /Git/ repos
- ability to provide own recipes
- =package.el= loads every package meanwhile =straight.el= only loads whatever
  is specifically stated on the init file

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent
         'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq straight-repository-branch "master")

;; do not fully clone repos, it's just not needed
(setq straight-vc-git-default-clone-depth 1)

;; always prefer native compilation
(setq straight-disable-compile nil)
(setq straight-disable-native-compile nil)
#+end_src

| [[https://github.com/jwiegley/use-package][use-package]] | a macro which allows writing declarative configurations |

TODO :: docs

for this matter, *the only allowed keywords* are the following:

- =:init=
- =:config=
- =:defer=
- =:demand=
- =:after=
- =:disabled=
- =:pin=

1. neither =:ensure= or =:straight= should be set explicitly as there are
   separate macros from external and built-in packages, also i'm =straight.el=
   anyways.

any other keyword(s) NOT listed above is/are *prohibited* for the reasons
detailed above.

#+begin_src emacs-lisp
(eval-when-compile
  (straight-use-package 'use-package)

  ;; always lazy load packages, unless instructed otherwise; use `:demand' to do
  ;; so, for extra info, see:
  ;; <https://github.com/jwiegley/use-package#notes-about-lazy-loading>
  (setq use-package-verbose           nil)
  (setq use-package-always-defer        t)
  (setq use-package-check-before-init nil) ;; performance hit
  (setq use-package-compute-statistics  t)
  (setq use-package-ignore-unknown-keywords nil)

  (defmacro annt--use-package-builtin-package (package &rest body)
    "Wrapper around `use-package' without external package integration, this is
  default behaviour, meant for explicitness purposed.
  PACKAGE and BODY are as in `use-package.'"
    (declare (indent 1))
    `(use-package ,package ,@body))

  (defalias 'use-builtin-package! #'annt--use-package-builtin-package)

  (defmacro annt--use-package-external-package (package &rest body)
    "Wrapper around `use-package' with external package integration; `straight.el'
  in this case.
  PACKAGE and BODY are as in `use-package.'"
    (declare (indent 1))
    `(use-package ,package :straight t ,@body))

  (defalias 'use-external-package! #'annt--use-package-external-package))
#+end_src

*** helpers

| [[https://github.com/noctuid/general.el][general]] | powerful package that offers macros and wrappers for key, advice and hook definitions |

*NOTE*: the following package drastically impacts the commonly used syntax for
defining keys/advices/hooks; as stated, these are macros and wrappers around
the "proper" way of defining those mentioned before.  it is adviced to have a
clear understanding of core commands such as =define-key=, =global-set-key=,
etc.  before proceeding to replace them with =package.el=.  please do read at
least the =README= file on the package's repository.

the ultimate goal with this package is to avoid the following:

#+begin_src emacs-lisp :tangle no
;; this
(let ((map global-map))
  (dolist (bind (list
                 (kbd "C-SPC")
                 (kbd "C-@")
                 [mouse-2]
                 [mouse-3]))
    (define-key map bind nil)))

;; is equivalent to this
(undef-key!
  :with #'ignore
  "C-SPC"
  "C-@"
  [mouse-2]
  [mouse-3])

;; also this...
(dolist (map (list
              evil-insert-state-map evil-normal-state-map
              evil-replace-state-map evil-visual-state-map))
  (define-key map [mouse-2] 'nil))

;; ... to this
(undef-key! '(evil-insert-state-map
              evil-normal-state-map
              evil-replace-state-map
              evil-visual-state-map)
  :with #'ignore
  [mouse-2])

;; also same...
(dolist (hooks '(haskell-mode-hook haskell-literate-mode-hook))
  (add-hook hooks #'lsp-deferred))

;; ... for hooks
(add-hook! '(haskell-mode-hook haskell-literate-mode-hook) #'lsp-deferred)
#+end_src

as you can see, it's easier to maintain and read...
the shipped defaults are great, there's really not many options as this relies
on function calls rather variables.

for simplicity and consistency the definitions have been aliased, it should be
intuitive.

#+begin_src emacs-lisp
(use-external-package! general
  :init
  (add-hook 'after-init-hook #'general-auto-unbind-keys)
  (setq general-implicit-kbd t) ;; auto expand "str" to (kbd "str")
  (defalias 'def-key!   #'general-def)
  (defalias 'undef-key! #'general-unbind)
  (defalias 'after-gui! #'general-after-gui))
#+end_src

| [[https://github.com/radian-software/blackout][blackout]] | modeline lighters cleaner |

#+begin_src emacs-lisp
(use-external-package! blackout :demand t)
#+end_src

** generals

settings that do not belong anywhere specific.

#+begin_src emacs-lisp
(use-builtin-package! emacs
  :config
  (setq delete-by-moving-to-trash t) ;; safer than `rm'
  (setq use-short-answers         t)
  (setq visible-bell              t)) ;; flash screen

;; always autorevert (dynamically refresh buffer contents)
(use-builtin-package! autorevert
  :defer 2
  :init
  (add-hook 'emacs-startup-hook #'global-auto-revert-mode)
  :config
  (setq auto-revert-verbose t))

;; performance improvement for really long files
(use-builtin-package! so-long
  :defer 2
  :config
  (global-so-long-mode))
#+end_src

*** windows, buffers and tabs

rules for window placement can be dictated via the =display-buffer-alist=
variable; for example, not spawning a window at all after the conclusion of a
=async-shell-command=.

/Protesilaos'/ [[https://youtu.be/rjOhJMbA-q0][video]] on the matter explains a few concepts like =side=, =slot=,
and other =display-buffer-*= commands.  it is a great introduction to window
management.

#+begin_src emacs-lisp
(use-builtin-package! window
  :config
  (setq display-buffer-alist
        `(
          ;;; no windows at all
          ;; shells
          ("\\`\\*Async shell command\\*\\'"
           (display-buffer-no-window))

          ;; help-like buffers
          ("\\*\\(.* # Help.*\\|Help\\)\\*"
           (display-buffer-in-side-window)
           (window-width . 0.36)
           (side         . right)
           (slot         . 0)))))
#+end_src

=ibuffer= is a built-in package which can replace the traditional
=list-buffers= (=C-x C-b=) command because there is so much it can do in
comparison to the latter.

/Protesilaos/ performs [[https://youtu.be/6KN_oSLFf-k][a great introduction]] to =ibuffer=, i really don't
exploit all its features as the basics suffice my needs; the =ibuffer-filter-*=
set of commands can really enhance one's workflow when working with multiple
buffers.

#+begin_src emacs-lisp
(use-builtin-package! ibuffer
  :init
  (def-key! [remap list-buffers] #'ibuffer) ;; remap traditional `list-buffers'
  :config
  (setq ibuffer-expert                      t)
  (setq ibuffer-view-ibuffer              nil)
  (setq ibuffer-case-fold-search            t)
  (setq ibuffer-use-other-window          nil)
  (setq ibuffer-default-sorting-mode 'recency)
  (setq ibuffer-always-compile-formats      t)
  (setq ibuffer-show-empty-filter-groups  nil)
  (setq ibuffer-default-sorting-reversep  nil)

  (def-key! [remap quit-window] #'kill-buffer-and-window)

  (use-external-package! evil-collection
    :config
    (evil-collection-init 'ibuffer)))
#+end_src

/David Wilson/'s tutorial on how to
[[https://youtu.be/C7ZlNRbWdVI][Organize Your Windows with the Tab Bar in Emacs 27]]
helped me settling myself in Emacs, i don't know why there isn't much content
related to /Emacs/ and tabs (as of this writing); wish i found this sooner...

currently the best scenario for tabs i've found is the ability to simulate
"workflows" (similar to window managers) inside /Emacs/ while preserving the
window splits/layout on each tab.  i previously struggled running a shell
inside Emacs while constantly having to switch buffers to edit a file; now it's
as simple as defining a new tab which holds the various shell i need for the
task at hand and all the file editing happens on the other(s) tab(s).

#+begin_src emacs-lisp
(use-builtin-package! tab-bar
  :defer 2
  :config
  (setq tab-bar-show 1) ;; only show tabs starting from 2+
  (setq tab-bar-position                    nil)
  (setq tab-bar-tab-hints                   nil)
  (setq tab-bar-new-tab-to           'rightmost)
  (setq tab-bar-close-tab-select        'recent)
  (setq tab-bar-close-button-show     'selected)
  (setq tab-bar-select-tab-modifiers '(control))
  (setq tab-bar-close-last-tab-choice       nil)

  ;; open a new tab at '~/' with `dired'
  ;; if `dashboard' is present, prefer it
  (setq tab-bar-new-tab-choice
        (if (featurep 'dashboard) "*dashboard*" "~/"))

  (tab-bar-mode)         ;; enable tabs
  (tab-bar-history-mode)) ;; enable tab history for undo/redo functionality
#+end_src

*** Emacs server

the following allows enabling an "/Emacs server/" on startup, this allows Emacs
to "share" itself across new instances (those being graphical or via terminal).

/Protesilaos/ provides a video tutorial with practical use cases [[https://youtu.be/BjhcmRMF9qs][here]].

#+begin_src emacs-lisp
(use-builtin-package! server
  :demand t
  :config
  (unless (or (server-running-p)
              (daemonp))
    (add-hook 'after-init-hook #'server-start)))
#+end_src

*** indentification

information about myself.

#+begin_src emacs-lisp
(use-builtin-package! emacs
  :config
  (setq user-full-name    "anntnzrb")
  (setq user-mail-address "anntnzrb@proton.me"))
  #+end_src

*** custom custom file

if you adjust settings directly from /Emacs/ (GUI), some Elisp code will be
appended to the =init.el= file, this can be a bit messy; this can be adjusted
to use another file and accomplish this.

#+begin_quote
i've finally decided to just not use a custom file at all; everything should be
handled from this file anyways.  i've had issues with my settings whenever i'm
going thru =customize= and accidentally set-up a settings or two.
#+end_quote

#+begin_src emacs-lisp
(use-builtin-package! emacs
  :config
  ;; change between `t' and `nil' to enable/disable custom file
  (let ((use-custom-file-p nil))
    (setq custom-file
          (if use-custom-file-p
              (expand-file-name "custom.el" user-emacs-directory)
            null-device))))
            #+end_src

*** backups

i've never used this functionality in a text editor before, i immediately
disable this feature as it can be annoying, /e.g/ (/Vim/'s swapfiles)...

however, if set properly this can be a catastrophe saver.

#+begin_src emacs-lisp
(use-builtin-package! files
  :config
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory "backups/"))))
  (setq make-backup-files     t)
  (setq backup-by-copying     t)
  (setq version-control       t)
  (setq delete-old-versions   t)
  (setq kept-new-versions     8)
  (setq kept-old-versions     2)
  (setq create-lockfiles    nil))
  #+end_src

*** editing

#+begin_src emacs-lisp
(use-builtin-package! emacs
  :config
  (setq mode-require-final-newline   t)
  (setq-default tab-width            4)
  (setq-default indent-tabs-mode   nil)
  (setq-default fill-column         79)

  ;; auto-fill
  (add-hook! '(prog-mode-hook text-mode-hook) #'auto-fill-mode)
  (blackout 'auto-fill-mode) ;; disable "Fill" lighter

  ;; trailing whitespaces
  (defun-hook! annt--show-trailing-whitespace-setup ()
    (prog-mode-hook text-mode-hook)
    "Sets up `show-trailing-whitespace'."
    (setq show-trailing-whitespace t))

  ;; line numbers
  (defun-hook! annt--line-numbers-setup ()
    (prog-mode-hook text-mode-hook)
    "Sets up `display-line-numbers' and `display-fill-column-indicator'."
    (setq display-line-numbers 'relative)
    (setq display-fill-column-indicator-column (+ fill-column 1)))

  ;; display vertical column at line limit
  (global-display-fill-column-indicator-mode)
  (global-hl-line-mode) ;; line highlighting

  ;; delete trailing whitespaces prior saving
  (add-hook 'before-save-hook #'whitespace-cleanup))
  #+end_src

| [[https://github.com/spudlyo/clipetty][clipetty]] | system clipboard integration for TTY |

#+begin_src emacs-lisp
(unless (display-graphic-p)
  (use-external-package! xclip
    :init (add-hook 'emacs-startup-hook #'xclip-mode)
    :config
    (setq xclip-program "xclip")
    (setq xclip-select-enable-clipboard t)))
#+end_src

*** Vi emulation

my journey on /*nix/ environments began with /[neo]Vi[m]/, it's difficult for
me not to seek for /Vi/ emulation everywhere.

| [[https://github.com/emacs-evil/evil][evil]] | extensible vi layer |

#+begin_src emacs-lisp
(use-external-package! evil
  :demand t ;; Evil is used everywhere
  :init
  ;; the following 2 need to be set before loading `evil'
  (setq evil-want-keybinding    nil)
  (setq evil-undo-system 'undo-redo) ;; EmacsV28+
  (evil-mode)
  :config
  (def-key! "C-M-<escape>" #'evil-local-mode)
  (def-key! evil-insert-state-map "C-g" #'evil-normal-state)

  ;; the following are mass unbinds from annoying defaults Evil ships with:
  (undef-key! '(evil-insert-state-map
                evil-normal-state-map
                evil-replace-state-map
                evil-visual-state-map)
    :with #'ignore
    [mouse-2])
  (undef-key! evil-motion-state-map [down-mouse-1])
  (undef-key! '(evil-insert-state-map evil-motion-state-map) "C-z"))
  #+end_src


| [[https://github.com/emacs-evil/evil-collection][evil-collection]] | collection of /Vi/ keybinds for some parts of /Emacs/ which are dealt incorrectly by evil |

#+begin_src emacs-lisp
(use-external-package! evil-collection
  :after evil
  :demand t
  :config
  (setq evil-collection-want-unimpaired-p nil)
  ;; emtpy the list of available modes and enable individually; no surprises
  ;; the list of modes may be found here:
  ;; <https://github.com/emacs-evil/evil-collection/blob/master/evil-collection.el>
  (setq evil-collection-mode-list nil)
  (evil-collection-init '(info help (custom cus-edit))))
  #+end_src

| [[https://github.com/emacs-evil/evil-surround][evil-surround]] | [[https://github.com/tpope/vim-surround][vim-surround]] emulation |

#+begin_src emacs-lisp
(use-external-package! evil-surround
  :after evil
  :defer 2
  :config
  (global-evil-surround-mode))
  #+end_src

*** mouse & cursor

mouse & mouse wheel behaviour.

+ don't copy region to kill-ring upon selection
+ hide mouse pointer when typing
+ remove mouse wheel acceleration
+ keep mouse pointer at the same visual position

mouse wheel behaviour:

+ scroll =1= line be default
+ holding =meta= scrolls half a screen
+ holding =control= adjusts the size of text (GNU Emacs =27+=)

#+begin_src emacs-lisp
(use-builtin-package! emacs
  :config
  (setq make-pointer-invisible          t)
  (setq mouse-drag-copy-region        nil)
  (setq mouse-wheel-follow-mouse      nil)
  (setq mouse-wheel-progressive-speed nil)
  (setq scroll-preserve-screen-position t)
  (setq mouse-wheel-scroll-amount
        '(1
          ((meta) . 0.5)
          ((control) . text-scale))))
          #+end_src

**** cursor

#+begin_src emacs-lisp
(use-builtin-package! frame
  :config
  (setq blink-cursor-blinks     0) ;; blink forever
  (setq blink-cursor-delay    0.2)
  (setq blink-cursor-interval 0.3)

  ;; settings for TTY Emacs
  (unless (display-graphic-p)
    (setq visible-cursor nil)))

(use-builtin-package! emacs
  :config
  ;; hourglass cursor
  (setq display-hourglass t)
  (setq hourglass-delay   0)) ;; display hourglass immediately

;; save cursor position
(use-builtin-package! saveplace
  :init
  (save-place-mode)
  :config
  (setq save-place-file (expand-file-name "backups/places" user-emacs-directory))
  (setq save-place-forget-unreadable-files t))
#+end_src

*** binds

place where general binds go, the rest should be on its respective section
under its respective =mode-map=-ing.

#+begin_src emacs-lisp
;;; defaults with undesired behaviour IMHO
;; on the following modes list, pressing `q' kill invoke `quit-window' which
;; literally only kills the window but leaves the buffer in there for you to
;; manually kill it; remap this behaviour to close-and-kill instead.
(use-builtin-package! emacs
  :config
  (def-key! '(Info-mode-map dired-mode-map help-mode-map)
    [remap quit-window] #'kill-buffer-and-window)

  ;; some defaults i dislike from the global map
  (undef-key!
    "C-z")

  (undef-key!
    :with #'ignore
    [mouse-2]
    [mouse-3]))
    #+end_src

** appearance

*** fonts

#+begin_src emacs-lisp
(after-gui!
  (use-builtin-package! faces
    :config
    (let ((font-size 12))
      ;; default
      (set-face-attribute 'default nil
                          :font (format "Iosevka-%s" font-size))
      ;; code
      (set-face-attribute 'fixed-pitch nil
                          :font (format "FantasqueSansMono-%s" font-size)))))
#+end_src

*** themes

| [[https://gitlab.com/protesilaos/modus-themes/][modus-themes]] | pair of highly accessible themes that conform with the WCAG AAA standard for colour contrast between background and foreground combinations |

seems like these themes work well in Emacs terminal mode, i previously set
themes to only load if running via graphical Emacs (=display-graphic-p=);
testing for now...

#+begin_src emacs-lisp
(use-builtin-package! modus-themes
  :init
  (load-theme 'modus-vivendi t t) ;; load modus-themes; don't enable yet
  :config
  (setq modus-themes-links         '(background italic))
  (setq modus-themes-region        '(no-extend bg-only accented))
  (setq modus-themes-syntax        '(green-strings yellow-comments))
  (setq modus-themes-mode-line     '(accented borderless))
  (setq modus-themes-org-blocks    'greyscale)
  (setq modus-themes-paren-match   '(bold underline))
  (setq modus-themes-lang-checkers 'straight-underline)
  (setq modus-themes-bold-constructs   t)
  (setq modus-themes-italic-constructs t)

  (def-key! "M-<f5>" #'modus-themes-toggle)

  ;; if running via GUI, prefer light or dark theme depending on daytime
  ;; else (terminal) prefer dark mode
  (let ((time (string-to-number (format-time-string "%H"))))
    (if (and (display-graphic-p) (and (> time 9) (< time 18)))
        (modus-themes-load-operandi)
      (modus-themes-load-vivendi))))
      #+end_src

| [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] | collection of various icon fonts |

#+begin_src emacs-lisp
(after-gui!
  (use-external-package! all-the-icons
    :config
    (defun-hook! annt--all-the-icons-setup ()
      emacs-startup-hook
      "Checks if `all-the-icons' fonts are downloaded, gets them if not."
      (unless (file-exists-p (expand-file-name
                              "~/.local/share/fonts/all-the-icons.ttf"))
        (all-the-icons-install-fonts t)))))
#+end_src

*** dashboard

#+begin_src emacs-lisp
(use-external-package! dashboard
  :init
  (dashboard-setup-startup-hook) ;; enable dashboard `after-init-hook'
  :config
  (setq dashboard-set-heading-icons  t)
  (setq dashboard-show-shortcuts     t)
  (setq dashboard-center-content     t)
  (setq dashboard-set-file-icons     t)
  (setq dashboard-set-init-info      t)
  (setq dashboard-set-footer         t)
  (setq dashboard-startup-banner 'logo)

  (setq dashboard-banner-logo-title "Behold; GNU/Emacs")

  (setq dashboard-items '((recents   . 5)
                          (bookmarks . 5)
                          (agenda    . 5)))

  (undef-key! dashboard-mode-map [remap quit-window])

  (use-external-package! evil-collection
    :config
    (evil-collection-init 'dashboard))

  (defun-hook! annt--dashboard-as-initial-buffer ()
    dashboard-mode-hook
    "Sets the initial buffer to dashboard."
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))))
    #+end_src

*** modeline

#+begin_src emacs-lisp
;; clock
(use-builtin-package! time
  :init
  (add-hook 'emacs-startup-hook #'display-time-mode)
  :config
  (setq display-time-format      "%a @ %H:%M")
  (setq display-time-interval              50) ;; update faster to catch up
  (setq display-time-default-load-average nil))

(use-builtin-package! emacs
  :config
  (setq column-number-mode   t)
  (setq size-indication-mode t)
  (setq column-number-indicator-zero-based nil))
  #+end_src

**** keycast

| [[https://github.com/tarsius/keycast][keycast]] | shows current key and its command in the mode line |

even though this is commonly used for screencasts (which i don't do), it looks
great and helps me identifying some muscle memory keys i usually press without
notice.

#+begin_src emacs-lisp
(use-external-package! keycast
  :init
  (add-hook 'emacs-startup-hook #'keycast-mode)
  :config
  (setq keycast-mode-line-format "%k%c%r")
  (setq keycast-tab-bar-format   "%k%c%r")

  ;; don't hide rest of the modeline
  (setq keycast-mode-line-remove-tail-elements nil)

  ;; disable logging when actually typing stuff
  (dolist (ev '(self-insert-command
                org-self-insert-command))
    (add-to-list 'keycast-substitute-alist `(,ev "..." "Typing…")))

  ;; list of events to ignore
  (dolist (ev '(ignore
                mouse-event-p
                mouse-movement-p
                mwheel-scroll
                lsp-ui-doc--handle-mouse-movement))
    (add-to-list 'keycast-substitute-alist `(,ev nil))))
    #+end_src

*** tooltips

- GTK-tooltips disabled for consistency

#+begin_src emacs-lisp
(use-builtin-package! tooltip
  :config
  (setq x-gtk-use-system-tooltips nil)
  (setq tooltip-short-delay         1)
  (setq tooltip-frame-parameters
        '((border-width          . 0)
          (internal-border-width . 4))))
          #+end_src

* dired

/Emacs/' =dir=-ectory =ed=-itor.

#+begin_src emacs-lisp
(use-builtin-package! dired
  :config
  (setq dired-hide-details-hide-symlink-targets nil)
  (setq dired-auto-revert-buffer #'dired-buffer-stale-p)
  (setq dired-recursive-copies  'always)
  (setq dired-recursive-deletes 'top)
  (setq dired-listing-switches "-AFhl --group-directories-first")
  (setq dired-dwim-target t)

  ;; disable some defaults
  (undef-key! dired-mode-map
    :with #'ignore
    [mouse-1]
    [mouse-2]
    [normal-state mouse-2])

  (def-key! dired-mode-map
    [mouse-3] #'dired-mouse-find-file
    [mouse-8] #'dired-up-directory)

  (use-external-package! evil-collection
    :config
    (evil-collection-init 'dired))

  ;; less verbose output
  (add-hook 'dired-mode-hook #'dired-hide-details-mode))
  #+end_src

| [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] | self-explanatory |

only enable /dired/ icons when using graphical /Emacs/.

#+begin_src emacs-lisp
(after-gui!
  (use-external-package! all-the-icons-dired
    :after dired
    :init
    (add-hook 'dired-mode-hook #'all-the-icons-dired-mode)
    :config
    (blackout 'all-the-icons-dired-mode)))
    #+end_src

* programming

section dedicated to programming & programming languages specifically.

| [[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode]] | keeps your code nicely aligned when all you do is type |

#+begin_src emacs-lisp
(use-external-package! aggressive-indent
  :after prog-mode
  :defer 2
  :config
  (setq aggressive-indent-comments-too    t)
  (setq aggressive-indent-sit-for-time 0.25)

  (def-key! aggressive-indent-mode-map
    "C-c C-q" #'aggressive-indent-indent-region-and-on)

  (add-hook 'prog-mode-hook #'aggressive-indent-mode))
  #+end_src

| [[https://github.com/emacs-lsp/lsp-mode/][lsp-mode]] | Emacs client/library for the /Language Server Protocol (LSP)/ |

#+begin_src emacs-lisp
(use-external-package! lsp-mode
  :after prog-mode
  :config
  (setq lsp-keymap-prefix          "C-c l")
  (setq lsp-lens-enable                  t)
  (setq lsp-modeline-diagnostics-enable  t)
  (setq lsp-headerline-breadcrumb-enable t))
  #+end_src

| [[https://github.com/joaotavora/eglot][eglot]] | LSP Client aimed to be lighter than =lsp-mode= |

#+begin_src emacs-lisp
(use-external-package! eglot
  :after prog-mode
  :config
  (def-key! :prefix "C-c c"
    "R" #'eglot-reconnect
    "r" #'eglot-rename
    "a" #'eglot-code-actions
    "f" #'eglot-format-buffer
    "F" #'eglot-format
    "h" #'eldoc
    "x" #'xref-find-definitions))
#+end_src

** Shell

settings for shell scripts.

#+begin_src emacs-lisp
(use-builtin-package! sh-script
  :config
  (setq sh-backlash-align t)
  (setq sh-basic-offset   4)

  ;; indentation
  (setq sh-indent-for-case-alt      '+)
  (setq sh-indent-for-case-label     0)
  (setq sh-indent-after-continuation t)

  ;; Flycheck
  (add-hook 'sh-mode-hook #'flycheck-mode))
  #+end_src

** Makefile

=Makefile= files should follow the [[https://www.gnu.org/software/make/manual/html_node/Makefile-Conventions.html][GNU Makefile conventions]].

#+begin_src emacs-lisp
(use-builtin-package! make-mode
  :config
  (setq makefile-backslash-align               t)
  (setq makefile-tab-after-target-colon        t)
  (setq makefile-use-curly-braces-for-macros-p t)

  ;; indentation
  (setq-local indent-tabs-mode t) ;; use tabs over spaces
  (setq tab-width 4))
  #+end_src

** C-like

programming languages that are syntactically similar to /C/.

*** C

settings and style for the /C/ language.

#+begin_src emacs-lisp
(use-builtin-package! cc-mode
  :config
  ;; OpenBSD KNF-style inherited from Kernighan & Ritchie
  (setq c-auto-align-backslashes                t)
  (setq c-backslash-max-column        fill-column)
  (setq c-basic-offset                          4)
  (setq c-electric-flag                         t)
  (setq c-mark-wrong-style-of-comment           t)
  (setq c-max-one-liner-length        fill-column)
  (setq c-tab-always-indent                     t)

  ;; offsets
  (setq c-strict-syntax-p t) ;; we're serious in here
  (setq c-offsets-alist
        '((c                    . c-lineup-C-comments)
          (block-close          . 0)
          (block-open           . 0)
          (case-label           . 0)
          (defun-block-intro    . +)
          (defun-close          . 0)
          (defun-open           . 0)
          (do-while-closure     . 0)
          (else-clause          . 0)
          (statement            . 0)
          (statement-case-intro . +)
          (statement-case-open  . +)))

  ;; braces
  (setq c-hanging-braces-alist
        '((defun-open  before after)
          (defun-close before after)))

  ;; Flycheck
  (add-hook 'c-mode-hook #'flycheck-mode)

  ;; LSP :: clangd
  (setq lsp-clangd-binary-path (executable-find "clangd"))
  (setq lsp-clients-clangd-args
        '("--header-insertion-decorators=0"
          "--clang-tidy"))
  (add-hook 'c-mode-hook #'lsp-deferred))
  #+end_src

** Lisp-like

shared settings for Lisp-like programming languages.

#+begin_src emacs-lisp
(use-builtin-package! lisp-mode
  :config
  (electric-pair-mode)
  ;; always be aggressive on Lisps
  (add-hook 'lisp-data-mode-hook #'aggressive-indent-mode))
  #+end_src

*** Emacs Lisp (Elisp)

#+begin_src emacs-lisp
(use-builtin-package! elisp-mode
  :config
  (setq checkdoc-verb-check-experimental-flag nil)
  ;; Flycheck
  (setq flycheck-emacs-lisp-load-path 'inherit)
  (add-hook 'emacs-lisp-mode-hook #'flycheck-mode))
  #+end_src

*** Common Lisp

#+begin_src emacs-lisp
(use-external-package! sly
  :after lisp-mode
  :config
  (setq sly-mrepl-history-file-name  "/tmp/.sly-mrepl-history")
  (setq sly-enable-evaluate-in-emacs                       nil)
  (setq sly-init-function                 'sly-init-using-asdf)
  (setq inferior-lisp-program          (executable-find "sbcl")))
  #+end_src

*** Racket

#+begin_src emacs-lisp
(defun annt--racket-mode-setup ()
  "Sets up mode for Racket."
  (interactive)
  (use-external-package! racket-mode
    :init
    (racket-mode)
    :config
    (add-hook 'racket-mode-hook #'flycheck-mode)))

(add-to-list 'auto-mode-alist '("\\.rkt[dl]?\\'" . annt--racket-mode-setup))
#+end_src

*** Fennel

#+begin_src emacs-lisp
(defun annt--fennel-mode-setup ()
  "Sets up mode for Fennel."
  (interactive)
  (use-external-package! fennel-mode
    :init
    (fennel-mode)))

(add-to-list 'auto-mode-alist '("\\.fnl\\'" . annt--fennel-mode-setup))
#+end_src

** Nix

#+begin_src emacs-lisp
(defun annt--nix-mode-setup ()
  "Sets up mode for Nix."
  (interactive)
  (use-external-package! nix-mode
    :init
    (nix-mode)
    :config
    (add-hook 'nix-mode-hook #'lsp-deferred)))

(add-to-list 'auto-mode-alist '("\\.nix\\'" . annt--nix-mode-setup))
#+end_src

** Haskell

#+begin_src emacs-lisp
(defun annt--haskell-mode-setup ()
  "Sets up mode for Haskell."
  (interactive)
  ;; packages
  (use-external-package! haskell-mode
    :init
    (haskell-mode)
    :config
    (straight-use-package hindent)
    (straight-use-package lsp-haskell)
    ;; format before saving
    (add-hook 'before-save-hook #'hindent-reformat-buffer)
    (add-hook! '(haskell-mode-hook haskell-literate-mode-hook) #'lsp-deferred)))

(add-to-list 'auto-mode-alist '("\\.hs\\'" . annt--haskell-mode-setup))
#+end_src

** Lua

| [[https://github.com/immerrr/lua-mode][lua-mode]] | /Lua/ support for Emacs |

#+begin_src emacs-lisp
(defun annt--lua-mode-setup ()
  "Sets up mode for Lua."
  (interactive)
  (use-external-package! lua-mode
    :init
    (lua-mode)
    :config
    (setq lua-indent-level 2)
    (add-hook 'lua-mode-hook #'lsp-deferred)))

(add-to-list 'auto-mode-alist '("\\.lua\\'" . annt--lua-mode-setup))
#+end_src

** YAML

| [[https://github.com/yoshiki/yaml-mode][yaml-mode]] | support for =.yml= files which are not natively supported |

#+begin_src emacs-lisp
(defun annt--yaml-mode-setup ()
  "Sets up mode for YAML."
  (interactive)
  (use-external-package! yaml-mode
    :init
    (yaml-mode)
    :config
    (setq yaml-indent-offset 2)))

(add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . annt--yaml-mode-setup))
#+end_src

** Web

*** HTML

#+begin_src emacs-lisp
(use-builtin-package! sgml-mode
  :config
  (add-hook 'sgml-mode-hook #'sgml-electric-tag-pair-mode)
  ;; LSP
  (add-hook 'sgml-mode-hook #'lsp-deferred))
  #+end_src

*** CSS

#+begin_src emacs-lisp
(use-builtin-package! css-mode
  :config
  ;; LSP
  (add-hook 'css-mode-hook #'lsp-deferred))
  #+end_src

*** JavaScript

#+begin_src emacs-lisp
(use-builtin-package! js
  :config
  (setq js-chain-indent t)
  (setq js-indent-level 2)
  (setq js-indent-align-list-continuation t)

  ;; LSP
  (add-hook 'js-mode-hook #'eglot-ensure))
#+end_src

*** TypeScript

| [[https://github.com/emacs-typescript/typescript.el][typescript.el]] |

#+begin_src emacs-lisp
(use-external-package! typescript-mode
  :after prog-mode
  :config
  (add-hook 'typescript-mode-hook #'eglot-ensure))
#+end_src

*** Markdown

| [[https://github.com/jrblevin/markdown-mode][markdown-mode]] | major mode for editing Markdown files |
| [[https://github.com/ardumont/markdown-toc][markdown-toc]]  | TOC generator for Markdown files      |

#+begin_src emacs-lisp
(use-external-package! markdown-mode
  :config
  ;; disabled to prevent changing other's file
  (setq markdown-indent-on-enter nil)
  (setq markdown-footnote-location 'header) ;; TODO :: test
  (setq markdown-enable-html        t)
  (setq markdown-enable-math        t)
  (setq markdown-table-align-p      t)
  (setq markdown-mouse-follow-link  t)
  (setq markdown-list-indent-width  4)
  (setq markdown-export-kill-buffer t)
  (setq markdown-disable-tooltip-prompt nil)
  (setq markdown-gfm-use-electric-backquote t)
  (setq markdown-enable-highlighting-syntax t)
  (setq markdown-live-preview-delete-export 'delete-on-destroy)

  (add-hook 'markdown-mode-hook #'markdown-toc-mode)
  ;; prefer GitHub-flavored MD for files named exactly 'README.md'
  (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode)))

;; MD TOC
(use-external-package! markdown-toc
  :after markdown-mode
  :config
  (setq markdown-toc-indentation-space  4)
  (setq markdown-toc-list-item-marker "-")
  (add-hook 'before-save-hook #'markdown-toc-generate-or-refresh-toc nil t))
  #+end_src

** Assembly

*** MIPS

| [[https://github.com/hlissner/emacs-mips-mode][mips-mode]] | a major mode for [[https://en.wikipedia.org/wiki/MIPS_architecture][MIPS Assembly]] |

#+begin_src emacs-lisp
(defun annt--mips-mode-setup ()
  "Sets up mode for MIPS Assembly."
  (interactive)
  (use-external-package! mips-mode
    :init
    (mips-mode)))

(add-to-list 'auto-mode-alist '("\\.mips$" . annt--mips-mode-setup))
#+end_src

* version control

the following is configured according to the [[https://cbea.ms/git-commit/][How to Write a Git Commit Message]]
guide.

in short, the /7 rules/ summarized:

#+begin_quote
1. Separate subject from body with a blank line
2. Limit the subject line to 50 characters
3. Capitalize the subject line
4. Do not end the subject line with a period
5. Use the imperative mood in the subject line
6. Wrap the body at 72 characters
7. Use the body to explain what and why vs. how
#+end_quote

#+begin_src emacs-lisp
(use-builtin-package! git-commit
  :config
  (setq git-commit-summary-max-length 50)
  (setq git-commit-style-convention-checks '(non-empty-second-line
                                             overlong-summary-line))
  ;; fill-column
  (defun-hook! annt--set-git-fill-column ()
    git-commit-mode-hook
    "Configures `fill-column' and `display-fill-column-indicator-column' for
correct git commit messages."
    (setq-local fill-column 72)
    (setq-local display-fill-column-indicator-column (+ fill-column 1))))
    #+end_src

| [[https://github.com/magit/magit][magit]] | complete text-based user interface to [[https://git-scm.com/][Git]] |

#+begin_src emacs-lisp
(use-external-package! magit
  :init
  (def-key! :prefix "C-c" "g" #'magit-status)
  :config
  (use-external-package! evil-collection
    :config
    (evil-collection-init '((magit magit-repos magit-submodule)
                            magit-section magit-todos))))
                            #+end_src

* applications & utilities

| [[https://github.com/justbur/emacs-which-key][which-key]] | displays available keybindings in popup |

#+begin_src emacs-lisp
(use-external-package! which-key
  :defer 2
  :config
  (setq which-key-lighter nil) ;; disable lighter on mode-line
  (setq which-key-paging-key          "<next>")
  (setq which-key-idle-delay               0.5)
  (setq which-key-max-display-columns      nil)
  (setq which-key-sort-order #'which-key-key-order-alpha)
  (which-key-mode))
  #+end_src

| [[https://github.com/Wilfred/helpful][helpful]] | better Emacs *help* buffer |

#+begin_src emacs-lisp
(use-external-package! helpful
  :defer 2
  :config
  (def-key!
    [remap      describe-key] #'helpful-key
    [remap   describe-symbol] #'helpful-symbol
    [remap  describe-command] #'helpful-command
    [remap describe-function] #'helpful-function
    [remap describe-variable] #'helpful-variable)

  (def-key! 'helpful-mode-map
    [remap quit-window] #'kill-buffer-and-window)

  ;; help window position
  (add-to-list 'display-buffer-alist '("\\*helpful.*\\*"
                                       (display-buffer-in-side-window)
                                       (window-width . 0.36)
                                       (side         . right)
                                       (slot         . 0)) t)

  (use-external-package! evil-collection
    :config
    (evil-collection-init 'helpful)))
    #+end_src

| [[https://github.com/tarsius/hl-todo][hl-todo]] | TODO/FIXME/etc keyword highlighting in comments and strings |

#+begin_src emacs-lisp
(use-external-package! hl-todo
  :after (:or text-mode prog-mode)
  :defer 2
  :config
  (add-hook! '(prog-mode-hook text-mode-hook) #'hl-todo-mode))
  #+end_src

| [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] | mode which highlights delimiters such as parentheses, brackets or braces according to their depth |

#+begin_src emacs-lisp
(use-external-package! rainbow-delimiters
  :after prog-mode
  :defer 2
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
  #+end_src

| [[https://github.com/malabarba/beacon][beacon]] | a flashing light that follows your cursor around so you don't lose it |

#+begin_src emacs-lisp
(use-external-package! beacon
  :defer 2
  :config
  (setq beacon-lighter         nil)
  (setq beacon-size    fill-column)
  (setq beacon-blink-delay     0.5)
  (setq beacon-blink-duration  0.5)
  (beacon-mode))
  #+end_src

| [[https://github.com/purcell/envrc][envrc]] | support for ~direnv~ which operates buffer-locally |

#+begin_src emacs-lisp
(use-external-package! envrc
  :when (executable-find "direnv")
  :init
  (add-hook 'prog-mode-hook #'envrc-global-mode))
  #+end_src

** completion & extras

| Abbreviations (Abbrevs) | built-in library for text abbreviations |

#+begin_src emacs-lisp
(use-builtin-package! abbrev
  :defer 2
  :config
  (setq only-global-abbrevs         nil)
  (setq abbrev-all-caps               t)
  (setq abbrev-suggest                t)
  (setq save-abbrevs          'silently)
  (setq abbrev-suggest-hint-threshold 3)
  (setq abbrev-file-name (expand-file-name "abbrevs" user-emacs-directory))

  ;; text-mode abbrevs
  (let ((table text-mode-abbrev-table))
    ;; Emacs-related
    (define-abbrev table "emacs"   "Emacs")
    (define-abbrev table "emacs27" "EmacsV27")
    (define-abbrev table "emacs28" "EmacsV28")
    (define-abbrev table "orgmode" "Org-Mode")
    (define-abbrev table "melpa"   "MELPA")

    ;; misc
    (define-abbrev table "mymail" user-mail-address)
    (define-abbrev table "ghub"   "GitHub")
    (define-abbrev table "glab"   "GitLab")
    (define-abbrev table "yt"     "YouTube")

    ;; prog-languages & others
    (define-abbrev table "cpp"       "C++")
    (define-abbrev table "readme"    "README")
    (define-abbrev table "latex"     "LaTeX")
    (define-abbrev table "html"      "HTML")
    (define-abbrev table "soyscript" "JavaScript"))

  ;; binds
  (def-key! ctl-x-map
    "a e" #'expand-abbrev
    "a u" #'unexpand-abbrev)

  (add-hook 'text-mode-hook #'abbrev-mode)

  ;; disable "Abbrev" lighter
  (blackout 'abbrev-mode))
  #+end_src

| [[https://github.com/oantolin/orderless][orderless]] | completion style that is /order-less/ |

#+begin_src emacs-lisp
(use-external-package! orderless
  :init
  (setq orderless-matching-styles '(orderless-regexp orderless-literal)))

(use-builtin-package! minibuffer
  :config
  (setq completion-styles '(orderless))
  ;; don't let SPC complete; '?' is for REGEXPs
  (undef-key! minibuffer-local-completion-map "SPC" "?"))
  #+end_src

| [[https://github.com/minad/vertico][vertico]] | minimalistic completion UI, uses /Emacs/' own completion engine in contrast to other tools like [[https://github.com/abo-abo/swiper][ivy]] and [[https://github.com/emacs-helm/helm][helm]] |

#+begin_src emacs-lisp
(use-external-package! vertico
  :init
  (vertico-mode)
  :config
  (setq vertico-count 10)
  (setq vertico-resize nil)
  (setq vertico-scroll-margin (/ vertico-count 2))
  (setq vertico-sort-function 'vertico-sort-history-length-alpha)

  (def-key! vertico-map
    "C-j" #'vertico-next
    "C-k" #'vertico-previous))
    #+end_src

| [[https://github.com/minad/marginalia][marginalia]] | annotations in the minibuffer |

#+begin_src emacs-lisp
(use-external-package! marginalia
  :defer 1
  :config
  (setq marginalia-align    'left)
  (setq marginalia-separator  nil)
  (setq marginalia-field-width 80)
  (marginalia-mode))
  #+end_src

| [[https://github.com/company-mode/company-mode][company]] | text completion completion framework |

#+begin_src emacs-lisp
(use-external-package! company
  :after prog-mode
  :defer 2
  :config
  (setq company-lighter-base      "Company")
  (setq company-idle-delay             0.15)
  (setq company-show-quick-access         t)
  (setq company-tooltip-align-annotations t)
  (setq company-minimum-prefix-length     1)

  (def-key! company-active-map
    "C-j"   #'company-select-next
    "C-k"   #'company-select-previous
    "<tab>" #'company-complete-selection
    "TAB"   #'company-complete-selection)

  (add-hook 'prog-mode-hook #'company-mode))
  #+end_src

| [[https://github.com/oantolin/embark][embark]] | perform actions on targets |

#+begin_src emacs-lisp
(use-external-package! embark
  :defer 2
  :config
  (def-key! "C-<escape>" #'embark-act))
  #+end_src

*** syntax checking

| [[https://github.com/flycheck/flycheck][flycheck]] | modern on-the-fly syntax checking |

#+begin_src emacs-lisp
(use-external-package! flycheck
  :after prog-mode
  :config
  (setq flycheck-mode-line-prefix                "FlyCheck")
  (setq flycheck-display-errors-delay                   0.3)
  (setq flycheck-idle-change-delay                      0.7)
  (setq flycheck-buffer-switch-check-intermediate-buffers t))
  #+end_src

*** snippets

#+begin_src emacs-lisp
(use-external-package! yasnippet
  :after (:or text-mode prog-mode)
  :defer 2
  :config
  (setq yas-verbosity 2)
  (def-key! yas-minor-mode-map "C-<tab>" #'yas-expand)
  (yas-reload-all)
  (add-hook! '(prog-mode-hook text-mode-hook) #'yas-minor-mode)

  ;; disable "yas" lighter
  (blackout 'yas-minor-mode))
  #+end_src

** spelling

very basic spell-checking system for now, as i find somewhat quite difficult to
manage multiple dictionaries.  also still studying the different backend
alternatives, those being =aspell=, =hunspell= & =enchant=.

#+begin_src emacs-lisp
(use-builtin-package! ispell
  :config
  (let ((backend "aspell"))
    (if (executable-find backend)
        (setq ispell-program-name backend)
      (annt--notify-and-log
       "Dictionary backend not found; spell checking disabled.")))

  ;; dictionaries
  (let ((dicts "en_GB"))
    (setq ispell-dictionary dicts)
    (setq ispell-local-dictionary dicts))

  (setq ispell-check-comments  t)
  (setq ispell-help-in-bufferp t)
  (setq ispell-extra-args '("--sug-mode=ultra"
                            "--run-together")))
                            #+end_src

*** FlySpell

/on-the-fly spell checking/; this minor mode allows highlighting incorrect
words.

#+begin_src emacs-lisp
(use-builtin-package! flyspell
 :defer 2
 :config
 (setq flyspell-issue-welcome-flag nil)
 (setq flyspell-issue-message-flag nil)

 (def-key! "M-\"" #'flyspell-buffer)

 (add-hook 'text-mode-hook #'flyspell-mode))
#+end_src

** bookmarks

#+begin_src emacs-lisp
(use-builtin-package! bookmark
  :config
  (setq bookmark-save-flag             nil)
  (setq bookmark-sort-flag               t)
  (setq bookmark-menu-length   fill-column)
  (setq bookmark-search-delay          0.5)
  (setq bookmark-use-annotations       nil)
  (setq bookmark-set-fringe-mark         t)
  (setq bookmark-version-control       nil)
  (setq bookmark-watch-bookmark-file   nil)
  (setq bookmark-menu-confirm-deletion   t)
  (setq bookmark-completion-ignore-case  t)
  (setq bookmark-default-file (expand-file-name "bookmarks" user-emacs-directory)))
  #+end_src

the following snippet of code gets tangled into the =bookmarks= file, there's
no need to directly edit it; modify it below instead.

#+begin_src emacs-lisp :tangle "bookmarks"
;; Emacs Bookmarks --- -*- coding: utf-8-emacs; mode: lisp-data -*-
;; -*- End Of Bookmark File Format Version Stamp -*-

(
 (""
  (filename . "~/"))
 ("emacs/"
  (filename . "~/.config/emacs/"))

 ("shell/"
  (filename . "~/.config/shell/"))
 )
#+end_src

** org

one of /Emacs/' killer features.

#+begin_src emacs-lisp
(use-builtin-package! org
  :config
  (setq org-startup-folded t)
  (setq org-src-fontify-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-edit-src-content-indentation 0)

  ;; list of available exports
  (setq org-export-backends '(ascii
                              beamer
                              groff
                              html
                              latex
                              man
                              md
                              odt
                              org
                              texinfo))

  ;; org-babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell      . t)))

  (add-to-list 'display-buffer-alist '("\\*Org Src.*\\*"
                                       (display-buffer-in-side-window)
                                       (window-height . 0.5)
                                       (side          . bottom)
                                       (slot          . 0)) t)

  (def-key! org-mode-map "<tab>" #'org-cycle))

(use-builtin-package! org-indent
  :after org
  :init
  (add-hook 'org-mode-hook #'org-indent-mode)
  :config
  (blackout 'org-indent-mode))
  #+end_src

| [[https://github.com/minad/org-modern][org-modern]] | prettify org |

#+begin_src emacs-lisp
(use-external-package! org-modern
  :after org
  :init
  (add-hook 'org-mode-hook #'org-modern-mode)
  :config
  (setq org-modern-tag   t)
  (setq org-modern-todo  t)
  (setq org-modern-table t)
  (setq org-modern-block t)
  (setq org-modern-priority   t)
  (setq org-modern-statistics t)
  (setq org-modern-horizontal-rule t))
  #+end_src

| [[https://github.com/snosov1/toc-org][toc-org]] | utility to have an up-to-date table of contents on ~Org~ and ~Markdown~ |

#+begin_src emacs-lisp
(use-external-package! toc-org
  :after org
  :init
  (add-hook 'org-mode-hook #'toc-org-mode)
  :config
  (setq toc-org-hrefify-default "gh"))
  #+end_src

| [[https://github.com/takaxp/org-tree-slide][org-tree-slide]] | allows creating presentations with /Org-Mode/ |

- references
  - [[https://youtu.be/vz9aLmxYJB0][Emacs Tips - How to Give Presentations with Org Mode]]

#+begin_src emacs-lisp
(use-external-package! org-tree-slide
  :after org
  :config
  (defun-hook! annt--org-present-start ()
    org-tree-slide-play-hook
    "Configurations settings for entering presentation mode."
    (interactive)
    ;; save current settings
    (setq-local display-line-numbers-orig display-line-numbers)

    ;; set new values
    (setq-local text-scale-mode-amount 3)
    (setq-local display-line-numbers nil)
    (org-display-inline-images) ;; enable images for org
    (display-fill-column-indicator-mode 0)
    (text-scale-set text-scale-mode-amount))

  (defun-hook! annt--org-present-end ()
    org-tree-slide-stop-hook
    "Configurations settings for exiting presentation mode, reverting changes
mostly."
    (interactive)
    ;; restore settings
    (setq-local text-scale-mode-amount 0)
    (setq display-line-numbers display-line-numbers-orig)
    (text-scale-set text-scale-mode-amount)
    (display-fill-column-indicator-mode))

  (setq org-tree-slide-activate-message    "Presentation ON")
  (setq org-tree-slide-deactivate-message "Presentation OFF")
  (setq org-image-actual-width nil)

  ;; keybinds
  (def-key! org-mode-map :prefix "C-c" "<f9>" #'org-tree-slide-mode))
  #+end_src

*** LaTeX

/Org/ allows writing /LaTeX/ expressions as well as exporting files, this
means, it is possible to export an /Org/ file to /PDF/ for example, this is
done via /LaTeX-pandoc/ as middle-men.  this was just a tiny example, there are
many options for exporting, usually exporting to /PDF/ is a common task.

in order to compile /LaTeX/ files via /Org/, a distribution for the [[https://en.wikipedia.org/wiki/TeX][TeX]]
typesetting is required.  /TeX Live/ is a free distribution which includes the
pertinent /TeX/ toolset to compile a /LaTeX/ file; you may find great
documentation and overview about it at the [[https://wiki.archlinux.org/title/TeX_Live][Arch Wiki (TeX Live)]].

[[https://pandoc.org/][Pandoc]] is a universal document converter which interoperates with the /Tex
Live/ toolset to produced the desired LaTeX file.  attempting to compile an Org
file using /LaTeX/ without the previously mentioned tools will result in
errors.

#+begin_src emacs-lisp
(use-builtin-package! ox-latex
  :after org
  :config
  ;; ensure this are always the default packages
  (setq org-latex-default-packages-alist
        '(("AUTO"     "inputenc"  t    ("pdflatex"))
          ("T1"       "fontenc"   t    ("pdflatex"))
          (""         "graphicx"  t)
          (""         "longtable" nil)
          (""         "wrapfig"   nil)
          (""         "rotating"  nil)
          ("normalem" "ulem"      t)
          (""         "amsmath"   t)
          (""         "amssymb"   t)
          (""         "capt-of"   nil)
          (""         "hyperref"  nil)))
  (setq org-latex-classes
        '(("article"
           "\\documentclass{article} [NO-DEFAULT-PACKAGES] [PACKAGES] [EXTRA]"
           ("\\section{%s}"       . "\\section*{%s}")
           ("\\subsection{%s}"    . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}"     . "\\paragraph*{%s}")
           ("\\subparagraph{%s}"  . "\\subparagraph*{%s}"))))
  (setq org-latex-compiler "xelatex"))
  #+end_src

***  setup files

these are the setup files to be included in /Org/ files, they could be included
at the top of every file, but for the sake of reducing file verbosity they're
kept alone and they included at will.  this also makes it easier maintain
different styles/configurations.

#+begin_src org :mkdirp yes :tangle "org/latex/latex-apa.org"
# APA style LaTeX <https://apastyle.apa.org/style-grammar-guidelines>

# Org
#+options: toc: 2

# LaTeX
#+latex_class_options: [12pt, letter]
#+latex_header:        \usepackage[doublespacing]{setspace}
#+latex_header:        \usepackage[portrait, margin=1in]{geometry}
# ** font
# check for 'Times' variants
#+latex_header: \usepackage{fontspec}
#+latex_header: \setmainfont{Times Newer Roman}
#+end_src
